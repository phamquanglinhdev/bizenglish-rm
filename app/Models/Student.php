<?php

namespace App\Models;

use App\Models\Scopes\StudentScope;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Student extends User
{
    use HasFactory;

    protected $table = "users";
    protected $guarded = ["id"];

    public static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope(new StudentScope);
    }

    public function Grades(): BelongsToMany
    {
        return $this->belongsToMany(Grade::class, "student_grade", "student_id", "grade_id");
    }

    public function Staff(): BelongsTo
    {
        return $this->belongsTo(Staff::class, "staff_id", "id");
    }

    public function Supporter(): ?string
    {
        $grades = $this->Grades()->first();
        if (isset($grades->id)) {
            return $grades->Supporters()->first();
        }
        return null;
    }

    public function getStatus(): string
    {
        return match ($this->student_status) {
            "0" => "Đang học",
            "1" => "Đã ngừng học",
            "2" => "Đang bảo lưu",
            default => "Không xác định",
        };
    }

    /**
     * @return Log[]
     */
    public function getLog(): array
    {
        /**
         * @var Grade[] $grades
         * @var Log[] $logs
         */
        $result = [];
        $grades = $this->Grades()->get();
        foreach ($grades as $grade) {
            $logs = $grade->Logs()->get();
            foreach ($logs as $log) {
                $result[] = $log;
            }
        }
        return $result;
    }

    public function getLogCount(): int
    {
        return count($this->getLog());
    }

    public function getLogCountMinutes(): int
    {
        $result = 0;
        foreach ($this->getLog() as $log) {
            $result += $log["duration"];
        }
        return $result;
    }

    public function getRemaining(): int
    {
        $remaining = 0;
        foreach ($this->Grades()->get() as $grade) {
            $remaining += $grade["minutes"];
        }

        return ($remaining - $this->getLogCountMinutes()) > 0 ? ($remaining - $this->getLogCountMinutes()) : "0";
    }

    public function getOwnTime(): array
    {
        $daily = [];
        $grades = $this->Grades()->where("disable", 0)->where("status", 0)->where("time", "!=", null)->get();
        $index = 0;
        foreach ($grades as $grade) {
            $time = $grade->time;
            foreach ($time as $day) {
                $daily[$day["day"]][$index]["value"] = $day["value"];
                $daily[$day["day"]][$index]["grade"] = $grade;
                $index++;
            }
        }
        return $daily;
    }

    public function originStaff(): BelongsTo
    {
        return $this->belongsTo(Staff::class, "staff_id", "id");
    }

    public function calendar(): \stdClass
    {
        $calendar = new \stdClass();
        $calendar->monday = [];
        $calendar->tuesday = [];
        $calendar->wednesday = [];
        $calendar->thursday = [];
        $calendar->friday = [];
        $calendar->saturday = [];
        $calendar->sunday = [];
        $grades = $this->Grades()->get();
        foreach ($grades as $grade) {
            $times = $grade->time;
            foreach ($times as $time) {
                $item = new \stdClass();
                $item->id = $grade->id;
                $item->name = $grade->name;
                $item->value = $time["value"];
                switch ($time["day"]) {
                    case "mon":
                        $calendar->monday[] = $item;
                        break;
                    case "tue":
                        $calendar->tuesday[] = $item;
                        break;
                    case "wed":
                        $calendar->wednesday[] = $item;
                        break;
                    case "thu":
                        $calendar->thursday[] = $item;
                        break;
                    case "fri":
                        $calendar->friday[] = $item;
                        break;
                    case "sat":
                        $calendar->saturday[] = $item;
                        break;
                    case "sun":
                        $calendar->sunday[] = $item;
                        break;
                }

            }
        }
        return $calendar;
    }
}
